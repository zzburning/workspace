set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8,gbk
set fileformats=unix,dos
set number                          " show line numbers
set ruler                           " show the cursor position all the time
set cursorline                      " show highlight current line
set shiftwidth=2                    " normal mode indentation commands use 2 spaces
set tabstop=4                       " actual tabs occupy 4 characters
" set expandtab                       " expand tabs to spaces
" set softtabstop=4                   " insert mode: tab & backspace use 4
" spaces 
"
set autoindent
" set autoread                        " reload files when changed on disk,
" i.e. via `git checkout`
set backspace=2                     " Fix broken backspace in some setups
" set backupcopy=yes                  " see :help crontab
set clipboard=unnamed               " yank and paste with the system
" clipboard
set directory-=.                    " don't store swapfiles in the current
" directory
set ignorecase                      " case-insensitive search
set incsearch                       " search as you type
" set smartcase                       " case-sensitive search if any caps
set laststatus=2                    " always show statusline
" set list                            " show trailing whitespace
" set listchars=tab:▸\ ,trail:▫
set scrolloff=3                     " show context above/below cursorline
" set wildignore=log/**,node_modules/**,target/**,tmp/**,*.rbc
" set wildmenu                        " show a navigable menu for tab
" completion
" set wildmode=longest,list,full
" set history=50                      " keep 50 lines of command line
" history
" set showcmd                         " display incomplete commands
" set mouse=a                         " Enable basic mouse behavior such as
" resizing buffers.
"  
"

if exists('$TMUX')                  " Support resizing in tmux
  set ttymouse=xterm2
endif
if has("vms")
  set nobackup                      " do not keep a backup file, use versions instead
else
  set backup                        " keep a backup file
  set backupdir=~/backup
endif
if (&t_Co == 256 || has('gui_running')) " gui settings
  if ($TERM_PROGRAM == 'iTerm.app')
    colorscheme solarized
  else
    colorscheme desert
  endif
endif

"--------------------------------------------
" keyboard shortcuts

inoremap jj <ESC>
inoremap jk <ESC>

map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l
imap <A-h> <Left>
imap <A-l> <Right>

let mapleader = ','
nmap <leader>a :Ack<space>
nmap <leader>b :CtrlPBuffer<CR>
nmap <leader>d :NERDTreeToggle<CR>
nmap <leader>f :NERDTreeFind<CR>
"map <leader>l :Align
nmap <leader>p :CtrlP<CR>
nmap <leader>t :TlistToggle<cr>
nmap <leader>T :CtrlPClearCache<CR>:CtrlP<CR>
nmap <leader>] :TagbarToggle<CR>
nmap <leader><space> :call whitespace#strip_trailing()<CR>
nmap <leader>g :GitGutterToggle<CR>
nmap <leader>c <Plug>Kwbd

nmap <F4> :AuthorInfoDetect<cr>
nmap <C-F12> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>
map <silent> <leader>D :call append(line("."),strftime("%b-%d-%Y")."  wangtao<wangtao@hisome.com>")<cr>


"--------------------------------------------
" vim functions
" Compile
func! _compile()
	exec ":silent !clear"
	exec "w"
	if &filetype == "c"
		let compilecmd="!gcc"
		"let compileflag="-g -Wall -c -o %<.o -pedantic -std=c99"
		let compileflag="-g -Wall -c -o %<.o"
	elseif &filetype == "cpp"
		let compilecmd="!g++"
		"let compileflag="-g -Wall -c -o %<.o -pedantic -std=c++98"
		let compileflag="-g -Wall -c -o %<.o"
	elseif &filetype == "java"
		let compilecmd="!javac"
		let compileflag=""
	endif
	exec compilecmd." % ".compileflag
endfunc

" Run
func! _run()
	exec ":silent !clear"
	exec "w"
	if &filetype == "c"
		exec "!gcc % -g -o %<.bin"
		exec "! ./%<.bin"
	elseif &filetype == "cpp"
		exec "!g++ % -g -o %<.bin"
		exec "! ./%<.bin"
	elseif &filetype == "java"
		exec "!java %<"
	endif
endfunc

" Debug
func!  _debug()
	exec ":silent !clear"
	exec "w"
	if &filetype == "c"
		exec "!gcc % -g -o %<.bin"
		exec "!gdb %<.bin"
	elseif &filetype == "cpp"
		exec "!g++ % -g -o %<.bin"
		exec "!gdb %<.bin"
	elseif &filetype == "java"
		exec "!javac %"
		exec "!jdb %<"
	endif
endfunc


" <F7>保存、编译;<F6>保存、运行;<F5>调试
nmap <F7> :call _compile()<CR>
imap <F7> <ESC>:call _compile()<CR>
vmap <F7> <ESC>:call _compile()<CR>

nmap <F6> :call _run()<CR>
imap <F6> <ESC>:call _run()<CR>
vmap <F6> <ESC>:call _run()<CR>

nmap <F5> :call _debug()<CR>
map <F5> <ESC>:call _debug()<CR>
map <F5> <ESC>:call _debug()<CR>


